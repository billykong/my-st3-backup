<snippet>
  <content><![CDATA[
AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation API gateway experiment
Parameters:
  Stage:
    Type: String
    Default: dev
Resources:
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: codingboar-lambda-functions
        S3Key: >-
          ${1:api-name}/${2:path-name}/handler.zip
      FunctionName: !Join 
        - '-'
        - - ${2:path-name}-handler
          - !Ref Stage
      Handler: handler.get
      MemorySize: 128
      Role: !GetAtt 
        - LambdaExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 6
    DependsOn:
      - LogGroup
      - LambdaExecutionRole 
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Join 
            - '-'
            - - !Ref Stage
              - ${1:api-name}-${2:path-name}
              - lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogStream'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${1:api-name}-${2:path-name}-*:*
              - Effect: Allow
                Action:
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub >-
                    arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${1:api-name}-${2:path-name}-*:*:*
      Path: /
      RoleName: !Join 
        - '-'
        - - ${1:api-name}-${2:path-name}
          - !Ref Stage
          - ap-southeast-1
          - lambdaRole
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - LambdaFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ApiGatewayRestApi
          - /*/*

  ApiGatewayRestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Join 
        - '-'
        - - ${1:api-name}
          - !Ref Stage
      EndpointConfiguration:
        Types:
          - REGIONAL
  ApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - ApiGatewayRestApi # it could also be parent resource
        - RootResourceId
      PathPart: ${2:path-name}
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodOptions:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        AuthorizationType: NONE
        HttpMethod: OPTIONS
        MethodResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
              method.response.header.Access-Control-Allow-Headers: true
              method.response.header.Access-Control-Allow-Methods: true
              method.response.header.Access-Control-Allow-Credentials: true
            ResponseModels: {}
        RequestParameters: {}
        Integration:
          Type: MOCK
          RequestTemplates:
            application/json: '{statusCode:200}'
          IntegrationResponses:
            - StatusCode: '200'
              ResponseParameters:
                method.response.header.Access-Control-Allow-Origin: '''*'''
                method.response.header.Access-Control-Allow-Headers: >-
                  'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'
                method.response.header.Access-Control-Allow-Methods: '''OPTIONS,GET'''
                method.response.header.Access-Control-Allow-Credentials: '''false'''
              ResponseTemplates:
                application/json: ''
        ResourceId: !Ref ApiGatewayResource
        RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayMethodGet:
      Type: 'AWS::ApiGateway::Method'
      Properties:
        HttpMethod: GET
        RequestParameters: { 
          method.request.querystring.example_id: false
        }
        ResourceId: !Ref ApiGatewayResource
        RestApiId: !Ref ApiGatewayRestApi
        ApiKeyRequired: false
        AuthorizationType: NONE
        Integration:
          IntegrationHttpMethod: POST
          Type: AWS_PROXY
          RequestParameters: { 
            integration.request.querystring.example_id: method.request.querystring.example_id,
          }
          Uri: !Join 
            - ''
            - - 'arn:aws:apigateway:'
              - !Ref 'AWS::Region'
              - ':lambda:path/2015-03-31/functions/'
              - !GetAtt 
                - LambdaFunction
                - Arn
              - /invocations
        MethodResponses: []
  ApiGatewayDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref Stage
    DependsOn:
      - ApiGatewayMethodGet
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join 
          - '-'
          - - /aws/lambda/${1:api-name}/${2:path-name}
            - !Ref Stage

]]></content>
  <!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
  <tabTrigger>basic-lambda-api</tabTrigger>
  <!-- Optional: Set a scope to limit where the snippet will trigger -->
  <scope>source.yaml</scope>
</snippet>
